<?xml version="1.0" encoding="utf-8"?>

<resources>
    <declare-styleable name="AppKeyboard">
        <attr name="state_long_pressable" format="boolean" />
        <attr name="keyWidth" format="dimension|fraction" />
        <attr name="keyHeight" format="dimension|fraction" />
        <attr name="horizontalGap" format="dimension|fraction" />
        <attr name="verticalGap" format="dimension|fraction" />
        <attr name="layout_margin" format="dimension"  />
    </declare-styleable>

    <declare-styleable name="AppKeyboard_Row">
        <attr name="rowEdgeFlags">
            <!-- Row is anchored to the top of the keyboard.-->
            <flag name="top" value="4" />
            <!-- Row is anchored to the bottom of the keyboard. -->
            <flag name="bottom" value="8" />
        </attr>
        <attr name="keyboardMode" format="reference" />

    </declare-styleable>

    <declare-styleable name="AppKeyboard_Key">
        <attr name="codes" format="integer|string" />
        <attr name="iconPreview" format="integer" />
        <attr name="popupCharacters" format="integer" />
        <attr name="popupKeyboard" format="integer" />
        <attr name="isRepeatable" format="boolean" />
        <attr name="isModifier" format="boolean" />
        <attr name="isSticky" format="boolean" />
        <attr name="gap" format="dimension|fraction" />
        <attr name="keyEdgeFlags">
            <!-- Key is anchored to the left of the keyboard.-->
            <flag name="left" value="1" />
            <!-- Key is anchored to the right of the keyboard.-->
            <flag name="right" value="2" />
        </attr>
        <attr name="keyIcon" format="reference" />
        <attr name="keyLabel" format="string" />
        <attr name="keyOutputText" format="string" />

    </declare-styleable>

    <declare-styleable name="AppKeyboardView">
        <attr name="keyboardViewStyle" format="reference" />
        <attr name="keyBackground" format="reference"/>
        <attr name="verticalCorrection" format="integer"/>
        <attr name="keyPreviewLayout" format="integer"/>
        <attr name="keyPreviewOffset" format="integer"/>
        <attr name="keyPreviewHeight" format="integer"/>
        <attr name="keyTextSize" format="dimension"/>
        <attr name="keyTextColor" format="color"/>
        <attr name="labelTextSize" format="dimension"/>
        <attr name="popupLayout" format="integer"/>
        <attr name="shadowColor" format="integer"/>
        <attr name="shadowRadius" format="integer"/>
    </declare-styleable>

    <declare-styleable name="Theme">
        <attr name="backgroundDimAmount" format="integer"/>

    </declare-styleable>

    <bool name="config_swipeDisambiguation">true</bool>


    <attr name="AppkeyboardViewStyle" format="reference"/>

    <!-- Set of framework-provided states that may be specified on a Drawable. Actual usage of
        states may vary between view implementations, as documented on the individual state
        attributes. -->
    <declare-styleable name="DrawableStates">
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view has input focus. -->
        <attr name="state_focused" format="boolean" />
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view's window has input focus. -->
        <attr name="state_window_focused" format="boolean" />
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view is enabled. -->
        <attr name="state_enabled" format="boolean" />
        <!-- State identifier indicating that the object <var>may</var> display a check mark. See
             {@link android.R.attr#state_checked} for the identifier that indicates whether it is
             actually checked. -->
        <attr name="state_checkable" format="boolean"/>
        <!-- State identifier indicating that the object is currently checked.  See
             {@link android.R.attr#state_checkable} for an additional identifier that can indicate
             if any object may ever display a check, regardless of whether state_checked is
             currently set. -->
        <attr name="state_checked" format="boolean"/>
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view (or one of its parents) is currently selected. -->
        <attr name="state_selected" format="boolean" />
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when the user is pressing down in a view. -->
        <attr name="state_pressed" format="boolean" />
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view or its parent has been "activated" meaning the user has currently
             marked it as being of interest.  This is an alternative representation of
             state_checked for when the state should be propagated down the view hierarchy. -->
        <attr name="state_activated" format="boolean" />
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view or drawable is considered "active" by its host. Actual usage may vary
             between views. Consult the host view documentation for details. -->
        <attr name="state_active" format="boolean" />
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view or drawable is considered "single" by its host. Actual usage may vary
             between views. Consult the host view documentation for details. -->
        <attr name="state_single" format="boolean" />
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view or drawable is in the first position in an ordered set. Actual usage
             may vary between views. Consult the host view documentation for details. -->
        <attr name="state_first" format="boolean" />
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view or drawable is in the middle position in an ordered set. Actual usage
             may vary between views. Consult the host view documentation for details. -->
        <attr name="state_middle" format="boolean" />
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a view or drawable is in the last position in an ordered set. Actual usage
             may vary between views. Consult the host view documentation for details. -->
        <attr name="state_last" format="boolean" />
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             indicating that the Drawable is in a view that is hardware accelerated.
             This means that the device can at least render a full-screen scaled
             bitmap with one layer of text and bitmaps composited on top of it
             at 60fps.  When this is set, the colorBackgroundCacheHint will be
             ignored even if it specifies a solid color, since that optimization
             is not needed. -->
        <attr name="state_accelerated" format="boolean" />
        <!-- State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
             set when a pointer is hovering over the view. -->
        <attr name="state_hovered" format="boolean" />
        <!-- State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that the Drawable is in a view that is capable of accepting a drop of
             the content currently being manipulated in a drag-and-drop operation. -->
        <attr name="state_drag_can_accept" format="boolean" />
        <!-- State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that a drag operation (for which the Drawable's view is a valid recipient)
             is currently positioned over the Drawable. -->
        <attr name="state_drag_hovered" format="boolean" />
        <!-- State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
             indicating that a View has accessibility focus. -->
        <attr name="state_accessibility_focused" format="boolean" />
    </declare-styleable>

</resources>